/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wlananalysis;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author SashNamizni
 */
public class SSIDForm extends javax.swing.JDialog {

    /**
     * Creates new form SSIDForm
     */
    private Connection conn;
    
    public SSIDForm(java.awt.Frame parent, boolean modal, Connection conn) {
        super(parent, modal);
        initComponents();
        this.conn = conn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ssidList = new javax.swing.JList();
        ssidLabel = new javax.swing.JLabel();
        ssidNoLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        macList = new javax.swing.JList();
        macLabel = new javax.swing.JLabel();
        analyzeSSIDButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SSID Analysis");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        ssidList.setToolTipText("SSID - number of devices containing this SSID");
        jScrollPane1.setViewportView(ssidList);

        ssidLabel.setText("SSID");

        macList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        macList.setToolTipText("MACs containing selected ID");
        jScrollPane2.setViewportView(macList);

        macLabel.setText("MAC containing SSID");

        analyzeSSIDButton.setText("Analyze SSID");
        analyzeSSIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeSSIDButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ssidLabel)
                    .addComponent(ssidNoLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(macLabel)
                            .addComponent(analyzeSSIDButton))
                        .addGap(0, 57, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ssidLabel)
                    .addComponent(macLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(ssidNoLabel)
                        .addContainerGap(29, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(analyzeSSIDButton)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try
        {
            if (conn == null)
                throw new NullPointerException("No connection to database!");
            
            ResultSet rs;            
            String selectDays = "SELECT ssid AS SSID, COUNT(DISTINCT(source)) AS Devices FROM `requests` GROUP BY SSID ORDER BY Devices DESC";
            
            Statement st = conn.createStatement();
            
            //ssidList
            rs = st.executeQuery(selectDays);
            DefaultListModel<String> listOfSSIDs = new DefaultListModel();
            String ssid;
            int ssidNo = 0, ssidCorrupted = 0;
            while (rs.next())
            {
                ssid = rs.getString(1);
                if(ssid.matches("\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.\\^.*"))
                {
                    ssidCorrupted++;
                    continue; //corrupted ssid;                    
                }
                else
                {
                    listOfSSIDs.addElement(rs.getString(2)+"-"+ssid);
                    ssidNo++;
                }
            }
                            
            ssidList.setModel(listOfSSIDs);
            ssidNoLabel.setText("Different SSIDs: "+ssidNo+", corrupted SSID entries: "+ssidCorrupted);
            
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formWindowOpened

    private void analyzeSSIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeSSIDButtonActionPerformed
        try
        {
            if (conn == null)
                throw new NullPointerException("No connection to database!");
            
            ResultSet rs;
            ArrayList<String> selectedSSIDList = (ArrayList)ssidList.getSelectedValuesList();
            ArrayList<String> tempMACList = new ArrayList<>(), intersectedMACList = new ArrayList<>(), temp = new ArrayList<>();
            String selectMACsWithSSID="";
            
            Statement st = conn.createStatement();
            for (String ssid : selectedSSIDList)
            {
                selectMACsWithSSID = "SELECT DISTINCT(source) AS Device FROM `requests` WHERE ssid = '"+ ssid.substring(ssid.indexOf("-")+1)+"';";
                rs = st.executeQuery(selectMACsWithSSID);
                while (rs.next()) //get MAC addresses from SSID
                    tempMACList.add(rs.getString(1));
                for (String mac : tempMACList) //foreach mac from last SSID
                    if(!intersectedMACList.isEmpty()) //if intersected is empty (usually first iteration)
                        if(!intersectedMACList.contains(mac)) //if intersected does not contain MAC from last SSID
                            temp.add(mac); //that means it can not be in Intersection
                tempMACList.removeAll(temp); //so we remove it from our last SSID list
                intersectedMACList.clear();
                intersectedMACList.addAll(tempMACList); // which becomes intersection
                tempMACList.clear(); temp.clear();
            }
            
            DefaultListModel<String> listOfMACs = new DefaultListModel();
            for (String mac : intersectedMACList)
                listOfMACs.addElement(mac);
            macList.setModel(listOfMACs);
            
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_analyzeSSIDButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeSSIDButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel macLabel;
    private javax.swing.JList macList;
    private javax.swing.JLabel ssidLabel;
    private javax.swing.JList ssidList;
    private javax.swing.JLabel ssidNoLabel;
    // End of variables declaration//GEN-END:variables
}
