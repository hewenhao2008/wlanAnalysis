/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wlananalysis;

import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.jfree.data.jdbc.JDBCCategoryDataset;

/**
 *
 * @author SashNamizni
 */
public class TimeForm extends javax.swing.JDialog {

    /**
     * Creates new form TimeForm
     */
    Connection conn;
    
    public TimeForm(java.awt.Frame parent, boolean modal, Connection conn) {
        super(parent, modal);
        initComponents();
        this.conn = conn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        daysScrollPane = new javax.swing.JScrollPane();
        daysList = new javax.swing.JList();
        analyzeDaysButton = new javax.swing.JButton();
        analyzeWeeks = new javax.swing.JButton();
        weeksScrollPane1 = new javax.swing.JScrollPane();
        weeksList = new javax.swing.JList();
        monthsScrollPane = new javax.swing.JScrollPane();
        monthsList = new javax.swing.JList();
        analyzeMonths = new javax.swing.JButton();
        dayLabel = new javax.swing.JLabel();
        weekLabel = new javax.swing.JLabel();
        monthLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Time analysis");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        daysList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        daysScrollPane.setViewportView(daysList);

        analyzeDaysButton.setText("Analyze days");
        analyzeDaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeDaysButtonActionPerformed(evt);
            }
        });

        analyzeWeeks.setText("Analyze weeks");
        analyzeWeeks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeWeeksActionPerformed(evt);
            }
        });

        weeksList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        weeksScrollPane1.setViewportView(weeksList);

        monthsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        monthsScrollPane.setViewportView(monthsList);

        analyzeMonths.setText("Analyze months");
        analyzeMonths.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeMonthsActionPerformed(evt);
            }
        });

        dayLabel.setText("Days");

        weekLabel.setText("Weeks");

        monthLabel.setText("Months");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(daysScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(analyzeDaysButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(weeksScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(analyzeWeeks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(monthsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(analyzeMonths, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(dayLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(weekLabel)
                .addGap(148, 148, 148)
                .addComponent(monthLabel)
                .addGap(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dayLabel)
                    .addComponent(weekLabel)
                    .addComponent(monthLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(monthsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(analyzeMonths))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(weeksScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(analyzeWeeks))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(daysScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(analyzeDaysButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try
        {
            if (conn == null)
                throw new NullPointerException("No connection to database!");
            
            ResultSet rs;            
            String selectDays = "SELECT DISTINCT(date) FROM `requests` ORDER BY date ASC;";
            String selectWeeks = "SELECT DISTINCT(DATE_FORMAT(date,'%u-%y')) FROM `requests` ORDER BY date ASC;";
            String selectMonths = "SELECT DISTINCT(DATE_FORMAT(date,'%M-%y')) FROM `requests` ORDER BY date ASC;";
            
            Statement st = conn.createStatement();
            
            //daysList
            rs = st.executeQuery(selectDays);
            DefaultListModel<Date> listOfDates = new DefaultListModel();
            while (rs.next())
                listOfDates.addElement(rs.getDate(1));            
            daysList.setModel(listOfDates);
            
            //weeksList
            rs = st.executeQuery(selectWeeks);
            DefaultListModel<String> listOfWeeks = new DefaultListModel();
            while (rs.next())
                listOfWeeks.addElement(rs.getString(1));
            weeksList.setModel(listOfWeeks);

            //weeksList
            rs = st.executeQuery(selectMonths);
            DefaultListModel<String> listOfMonths = new DefaultListModel();
            while (rs.next())
                listOfMonths.addElement(rs.getString(1));
            monthsList.setModel(listOfMonths);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formWindowOpened

    private void analyzeDaysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeDaysButtonActionPerformed
        try
        {
            ArrayList<Date> selectedDateList = (ArrayList)daysList.getSelectedValuesList();
            if (selectedDateList.isEmpty())
                throw new Exception("Select date(s) first!");

            String select, field1, field2, graphName;            
            if (selectedDateList.size() == 1)
            {
                field1 = "Hour"; field2 = "Devices";
                graphName = "Daily graph - " + selectedDateList.get(0).toString();
                select = "SELECT HOUR(timestamp) as "+field1+", COUNT(DISTINCT(source)) as "+field2+" FROM `requests` WHERE date='" + selectedDateList.get(0).toString() + "' GROUP BY Hour;";
            }
            else
            {
                field1 = "Day"; field2 = "Devices";
                String date1 = selectedDateList.get(0).toString();
                String date2 = selectedDateList.get(selectedDateList.size()-1).toString();
                graphName = "Graph for days: "+date1+" - "+date2; 
                select = "SELECT DATE_FORMAT(date,'%d-%m') as "+field1+", COUNT(DISTINCT(source)) as "+field2+" "
                        + "FROM `requests` "
                        + "WHERE date BETWEEN '"+date1+"' AND '"+date2+"' "
                        + "GROUP BY DATE(date);";
            }
            
            JDBCCategoryDataset ds = new JDBCCategoryDataset(conn);
            ds.executeQuery(select);            
            new BarChart(this, graphName, ds, field1, field2);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_analyzeDaysButtonActionPerformed

    private void analyzeWeeksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeWeeksActionPerformed
        try
        {
            ArrayList<String> selectedWeekList = (ArrayList)weeksList.getSelectedValuesList();
            if (selectedWeekList.isEmpty())
                throw new Exception("Select week(s) first!");

            String select, field1, field2, graphName;            
            if (selectedWeekList.size() == 1)
            {
                field1 = "Day"; field2 = "Devices";
                String selectedWeek = selectedWeekList.get(0).split("-")[0];
                String selectedYear = "20"+selectedWeekList.get(0).split("-")[1];
                graphName = "Weekly graph - week " + selectedWeek;
                select = "SELECT DATE_FORMAT(date,'%d-%m') as "+field1+", COUNT(DISTINCT(source)) as "+field2+" FROM `requests` WHERE WEEK(date, 1)=" + selectedWeek + " AND YEAR(date)="+selectedYear+" GROUP BY date;";
            }
            else
            {
                field1 = "Week"; field2 = "Devices";
                String week1 = selectedWeekList.get(0).toString().split("-")[0];
                String week2 = selectedWeekList.get(selectedWeekList.size()-1).toString().split("-")[0];
                graphName = "Graph for weeks: "+week1+" - "+week2; 
                select = "SELECT DATE_FORMAT(date, '%u') as "+field1+", COUNT(DISTINCT(source)) as "+field2+" "
                        + "FROM `requests` "
                        + "WHERE DATE_FORMAT(date, '%u') BETWEEN '"+week1+"' AND '"+week2+"' "
                        + "GROUP BY "+field1+";";
            }
            
            JDBCCategoryDataset ds = new JDBCCategoryDataset(conn);
            ds.executeQuery(select);            
            new BarChart(this, graphName, ds, field1, field2);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_analyzeWeeksActionPerformed

    private void analyzeMonthsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeMonthsActionPerformed
        try
        {
            ArrayList<String> selectedMonthList = (ArrayList)monthsList.getSelectedValuesList();
            if (selectedMonthList.isEmpty())
                throw new Exception("Select months(s) first!");

            String select, field1, field2, graphName;            
            if (selectedMonthList.size() == 1)
            {
                field1 = "Weeks"; field2 = "Devices";
                String selectedMonth = selectedMonthList.get(0).split("-")[0];
                String selectedYear = "20"+selectedMonthList.get(0).split("-")[1];
                //get week numbers
                select = "SELECT WEEK(date) FROM `requests` WHERE MONTHNAME(date)= '"+selectedMonth+"' AND YEAR(date) = "+selectedYear+" GROUP BY WEEK(date)";
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery(select);
                
                ArrayList<Integer> weekNumbersList = new ArrayList();
                while (rs.next())
                    weekNumbersList.add(rs.getInt(1));
                String whereWeeks = " WHERE (";
                for (Integer weekNumber : weekNumbersList)
                    whereWeeks += "WEEK(date)=" + weekNumber + " OR ";
                whereWeeks = whereWeeks.substring(0, whereWeeks.length()-4)+") ";
                graphName = "Monthly graph - " + selectedMonthList.get(0);                
                select = "SELECT WEEK(date) as "+field1+", COUNT(DISTINCT(source)) as "+field2+" FROM `requests`"+whereWeeks +" AND YEAR(date)="+selectedYear+" GROUP BY "+field1+";";
            }
            else
            {
                field1 = "Month"; field2 = "Devices";
                String month1 = selectedMonthList.get(0).split("-")[0];
                String year1 = "20"+selectedMonthList.get(0).split("-")[1];
                String month2 = selectedMonthList.get(selectedMonthList.size()-1).split("-")[0];
                String year2 = "20"+selectedMonthList.get(selectedMonthList.size()-1).split("-")[1];
                graphName = "Graph for weeks: "+selectedMonthList.get(0)+" - "+selectedMonthList.get(selectedMonthList.size()-1); 
                select = "SELECT DATE_FORMAT(date, '%M-%y') as "+field1+", COUNT(DISTINCT(source)) as "+field2+" "
                        + "FROM `requests` "
                        + "WHERE (MONTH(date) BETWEEN "+getMonthNumber(month1)+" AND "+getMonthNumber(month2)+") "
                            + "AND (YEAR(date) BETWEEN "+year1+" AND "+year2+") "
                        + "GROUP BY "+field1
                        + " ORDER BY date;";
            }
            
            JDBCCategoryDataset ds = new JDBCCategoryDataset(conn);
            ds.executeQuery(select);            
            new BarChart(this, graphName, ds, field1, field2);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_analyzeMonthsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeDaysButton;
    private javax.swing.JButton analyzeMonths;
    private javax.swing.JButton analyzeWeeks;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JList daysList;
    private javax.swing.JScrollPane daysScrollPane;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JList monthsList;
    private javax.swing.JScrollPane monthsScrollPane;
    private javax.swing.JLabel weekLabel;
    private javax.swing.JList weeksList;
    private javax.swing.JScrollPane weeksScrollPane1;
    // End of variables declaration//GEN-END:variables
    private String getMonthNumber(String monthString)
    {
        try 
        {
            switch (monthString) {
                case "January": return "1";
                case "February": return "2";
                case "March": return "3";
                case "April": return "4";
                case "May": return "5";
                case "June": return "6";
                case "July": return "7";
                case "August": return "8";
                case "September": return "9";
                case "October": return "10";
                case "November": return "11";
                case "December": return "12";
                default:
                    throw new Exception("Wrong string for month - " + monthString); //wrong string
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    /*private ArrayList<Integer> getWeekList(String selectedMonth, String selectedYear) {
        try 
        {
            ArrayList<Integer> weekList = new ArrayList<>();
            return weekList;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }*/
}
