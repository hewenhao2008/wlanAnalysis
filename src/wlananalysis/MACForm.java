/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wlananalysis;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author SashNamizni
 */
public class MACForm extends javax.swing.JDialog {

    /**
     * Creates new form MACForm
     */
    private Connection conn;
    private File inputFolder;
    private int totalTime;
    
    public MACForm(java.awt.Frame parent, boolean modal, Connection conn, File inputFolder) {
        super(parent, modal);
        initComponents();
        this.conn = conn;
        this.inputFolder = inputFolder;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manufacturersGroup = new javax.swing.ButtonGroup();
        macPanel = new javax.swing.JPanel();
        macScrollPane = new javax.swing.JScrollPane();
        macList = new javax.swing.JList();
        macNoLabel = new javax.swing.JLabel();
        manufLabel = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        apple = new javax.swing.JRadioButton();
        samsung = new javax.swing.JRadioButton();
        all = new javax.swing.JRadioButton();
        htc = new javax.swing.JRadioButton();
        nokia = new javax.swing.JRadioButton();
        sony = new javax.swing.JRadioButton();
        analyzeButton = new javax.swing.JButton();
        macAnalysisPanel = new javax.swing.JPanel();
        dateInRangeLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dateList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        hoursList = new javax.swing.JList();
        graphPanel = new javax.swing.JPanel();
        totalTimeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MAC Analysis");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        macPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MAC addresses", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        macList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        macList.setToolTipText("Address - days in range");
        macScrollPane.setViewportView(macList);

        macNoLabel.setText("Different MACs: ");

        manufLabel.setText("Manufacturer");

        updateButton.setText("Update list!");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        manufacturersGroup.add(apple);
        apple.setText("Apple");

        manufacturersGroup.add(samsung);
        samsung.setText("Samsung");

        manufacturersGroup.add(all);
        all.setText("All");

        manufacturersGroup.add(htc);
        htc.setText("HTC");

        manufacturersGroup.add(nokia);
        nokia.setText("Nokia");

        manufacturersGroup.add(sony);
        sony.setText("Sony");

        analyzeButton.setText("Analyze MAC!");
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout macPanelLayout = new javax.swing.GroupLayout(macPanel);
        macPanel.setLayout(macPanelLayout);
        macPanelLayout.setHorizontalGroup(
            macPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(macPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(macPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(macPanelLayout.createSequentialGroup()
                        .addComponent(macScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(macPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(manufLabel)
                            .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(apple)
                            .addComponent(samsung)
                            .addComponent(all)
                            .addComponent(htc)
                            .addComponent(nokia)
                            .addComponent(sony)
                            .addComponent(analyzeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(macNoLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        macPanelLayout.setVerticalGroup(
            macPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(macPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(macPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(macScrollPane)
                    .addGroup(macPanelLayout.createSequentialGroup()
                        .addComponent(manufLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(all)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(apple)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(samsung)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(htc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nokia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sony)
                        .addGap(18, 18, 18)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(analyzeButton)))
                .addGap(18, 18, 18)
                .addComponent(macNoLabel))
        );

        macAnalysisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Specific MAC analysis"));

        dateInRangeLabel.setText("In range on dates:");

        dateList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dateList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dateListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(dateList);

        jLabel2.setText("Hours");
        jLabel2.setToolTipText("Hours of the day on selected date, when selected device was in range.");

        hoursList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(hoursList);

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        totalTimeLabel.setText("Total time:");

        javax.swing.GroupLayout macAnalysisPanelLayout = new javax.swing.GroupLayout(macAnalysisPanel);
        macAnalysisPanel.setLayout(macAnalysisPanelLayout);
        macAnalysisPanelLayout.setHorizontalGroup(
            macAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(macAnalysisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(macAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(dateInRangeLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(macAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(macAnalysisPanelLayout.createSequentialGroup()
                        .addComponent(totalTimeLabel)
                        .addGap(0, 418, Short.MAX_VALUE)))
                .addContainerGap())
        );
        macAnalysisPanelLayout.setVerticalGroup(
            macAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(macAnalysisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(macAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateInRangeLabel)
                    .addComponent(totalTimeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(macAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(macAnalysisPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                    .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(macPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(macAnalysisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(macAnalysisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(macPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try
        {
            if (conn == null)
                throw new NullPointerException("No connection to database!");
            
            if (inputFolder == null)
            {
                JOptionPane.showMessageDialog(this, "No input folder selected! You will not be able to filter MAC addresses by manufacturer!", "Error!", JOptionPane.WARNING_MESSAGE);
                updateButton.setEnabled(false);
            }
            
            ResultSet rs;
            String selectDistinctMAC = "SELECT source AS Device, COUNT(DISTINCT(date)) AS Days FROM `requests` GROUP BY Device ORDER BY Days DESC;";
            Statement st = conn.createStatement();
            
            rs = st.executeQuery(selectDistinctMAC);
            DefaultListModel<String> listOfDistinctMAC = new DefaultListModel();
            while (rs.next())
                listOfDistinctMAC.addElement(rs.getString(1).toUpperCase()+"-"+rs.getInt(2));
            
            macList.setModel(listOfDistinctMAC);
            macNoLabel.setText("Different MACs: " + listOfDistinctMAC.size());
            
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formWindowOpened

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try
        {
            if (conn == null)
                throw new NullPointerException("No connection to database!");
            
            ResultSet rs;
            String selectDistinctMAC;
            String endStatement;
            String filterMAC = "";
            selectDistinctMAC = "SELECT source AS Device, COUNT(DISTINCT(date)) AS Days FROM `requests`";
            endStatement = " GROUP BY Device ORDER BY Days DESC";
            Statement st = conn.createStatement();
            
            String selectedManuf = getSelectedButtonText(manufacturersGroup);
            if (!selectedManuf.equals("All"))
                filterMAC = addFilter(selectedManuf);
            
            selectDistinctMAC += filterMAC + endStatement;
            
            rs = st.executeQuery(selectDistinctMAC);
            DefaultListModel<String> listOfDistinctMAC = new DefaultListModel();
            while (rs.next())
                listOfDistinctMAC.addElement(rs.getString(1).toUpperCase()+"-"+rs.getInt(2));
            
            macList.setModel(listOfDistinctMAC);
            macNoLabel.setText("Different MACs: " + listOfDistinctMAC.size());            
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
        try
        {
            if (hoursList.getModel().getSize() != 0)
            {
                DefaultListModel hoursModel = (DefaultListModel)hoursList.getModel();
                hoursModel.clear();
            }
            if (dateList.getModel().getSize() != 0)
            {
                DefaultListModel dateModel = (DefaultListModel)dateList.getModel();
                dateModel.clear();
            }
            
            if (conn == null)
                throw new NullPointerException("No connection to database!");
            
            String selectedDevice = macList.getSelectedValue().toString().split("-")[0];
            
            ResultSet rs;
            String selectDatesForMAC = "SELECT DISTINCT(date) FROM `requests` WHERE source = '"+selectedDevice+"';";
            Statement st = conn.createStatement();
            
            rs = st.executeQuery(selectDatesForMAC);
            DefaultListModel<Date> datesInRangeForMAC = new DefaultListModel();
            ArrayList<Date> datesInRangeForMACList = new ArrayList<>();
            Date date;
            while (rs.next())
            {
                date = rs.getDate(1);
                datesInRangeForMAC.addElement(date);
                //dateTimeForMAC.put(date, new ArrayList<Integer>());
                datesInRangeForMACList.add(date);
            }
            dateList.setModel(datesInRangeForMAC);
            
            String selectTimestampsForDate;
            TreeMap<Date,ArrayList<Timestamp>> dateTimeForMAC = new TreeMap<>();
            for (Date dateInRange : datesInRangeForMACList)
            {
                selectTimestampsForDate = "SELECT timestamp FROM `requests` "
                                        + "WHERE source = '"+selectedDevice+"' AND date = '"+dateInRange+"'";
                rs = st.executeQuery(selectTimestampsForDate);
                ArrayList<Timestamp> times = new ArrayList<>();
                while (rs.next())
                    times.add(rs.getTimestamp(1));
                dateTimeForMAC.put(dateInRange, times);
            }
            
            CategoryDataset ds = getDatasetFromDateTime(dateTimeForMAC);
            totalTimeLabel.setText("Total time: "+(totalTime > 100 ? (totalTime/60)+":"+(totalTime%60)+" hrs":totalTime+" min"));
            //new BarChart(graphPanel, "Total time by day", ds, "Day", "Minutes");
            new StackedBarChart(graphPanel, "Total time by day", ds, "Day", "Minutes");
            
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_analyzeButtonActionPerformed

    private void dateListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dateListValueChanged
        try
        {                
            if (conn == null)
                throw new NullPointerException("No connection to database!");
            int dateListSize = dateList.getModel().getSize();
         
            if (dateListSize > 0 && !dateList.isSelectionEmpty())
            {
                String selectedDevice = macList.getSelectedValue().toString().split("-")[0];
                String selectedDate = dateList.getSelectedValue().toString();

                ResultSet rs;
                String selectHoursOnDates = "SELECT DISTINCT(HOUR(timestamp)) FROM `requests` WHERE source = '"+selectedDevice+"' AND date = '"+selectedDate+"';";
                Statement st = conn.createStatement();

                rs = st.executeQuery(selectHoursOnDates);
                DefaultListModel<String> hoursOnDatesForMAC = new DefaultListModel();
                while (rs.next())
                    hoursOnDatesForMAC.addElement(rs.getString(1));

                hoursList.setModel(hoursOnDatesForMAC);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }        
    }//GEN-LAST:event_dateListValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton all;
    private javax.swing.JButton analyzeButton;
    private javax.swing.JRadioButton apple;
    private javax.swing.JLabel dateInRangeLabel;
    private javax.swing.JList dateList;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JList hoursList;
    private javax.swing.JRadioButton htc;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel macAnalysisPanel;
    private javax.swing.JList macList;
    private javax.swing.JLabel macNoLabel;
    private javax.swing.JPanel macPanel;
    private javax.swing.JScrollPane macScrollPane;
    private javax.swing.JLabel manufLabel;
    private javax.swing.ButtonGroup manufacturersGroup;
    private javax.swing.JRadioButton nokia;
    private javax.swing.JRadioButton samsung;
    private javax.swing.JRadioButton sony;
    private javax.swing.JLabel totalTimeLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private String addFilter(String manufacturer) {
        try
        {
            String filter = "";
            ArrayList<String> manufAddressSpaceList = new ArrayList<>();
            
            String manufFilePath = inputFolder.getAbsolutePath()+"/manufacturers/"+manufacturer.toLowerCase()+".txt";
            File manufFile = new File(manufFilePath);
            
            if (!manufFile.exists())
                throw new Exception("File not found!" + manufFilePath);
            
            String line;
            BufferedReader reader = new BufferedReader(new FileReader(manufFile));
            filter += " WHERE ";
            while ((line = reader.readLine()) != null)
            {
                filter += "source LIKE '"+line+":__:__:__' OR ";    
            }
            filter = filter.substring(0, filter.length()-4);
            return filter;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }
    
    private String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getText();
            }
        }
        return null;
    }

    private CategoryDataset getDatasetFromDateTime(TreeMap<Date,ArrayList<Timestamp>> dateTimeForMAC) {
        final int timeRange = 120; //time range in seconds
        try
        {
            int timeOnDates = 0, totalTimeByDay, seriesTime = 0, timeInSeries = 0;
            long seconds1, seconds2, delta;
            DefaultCategoryDataset ds = new DefaultCategoryDataset();
            String time1 = "", time2 = "";
            DateFormat df = new SimpleDateFormat("HH:mm:ss");
            
            for ( Map.Entry<Date, ArrayList<Timestamp>> entry : dateTimeForMAC.entrySet() )
            {
                Date entryDate = entry.getKey();
                ArrayList<Timestamp> entryTimes = entry.getValue();
                totalTimeByDay = 0;
                
                if (entryTimes.size() > 1)
                {
                    for(int i=1; i<entryTimes.size(); i++)
                    {
                        seconds1 = entryTimes.get(i).getTime()/1000;
                        seconds2 = entryTimes.get(i-1).getTime()/1000;
                        delta = seconds1 - seconds2;
                        if (delta < timeRange)
                        {
                            seriesTime = seriesTime + (int)delta;
                            if (timeInSeries == 0)
                                time1 = df.format(entryTimes.get(i-1));
                            timeInSeries++;
                            if (!(i == entryTimes.size()-1)) //if we are at last entry, end the series
                                continue;
                        }
                        //series ends
                        if (seriesTime > 0)
                        {
                            if (entryTimes.size() == 2) //if list contains only 2 entries and those are inside timeRange, get second time (at position 1)
                                time2 = df.format(entryTimes.get(i));
                            else
                                time2 = df.format(entryTimes.get(i-1));
                            ds.addValue(((double)seriesTime)/60, time1+"-"+time2, entryDate.toString().substring(5));
                            totalTimeByDay = totalTimeByDay + seriesTime;
                            seriesTime = 0; timeInSeries = 0; //finished with this interval
                        }
                    }
                }
                //ds.addValue(totalTimeByDay/60, "Minutes", date.toString().substring(5,date.toString().length())); // /60 -> time in minutes
                timeOnDates = timeOnDates + totalTimeByDay;
            }
            this.totalTime = timeOnDates/60; //fast hack /60 to get minutes
            return ds;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }
}
