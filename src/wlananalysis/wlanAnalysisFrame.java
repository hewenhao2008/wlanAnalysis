/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wlananalysis;

import java.io.File;
import java.sql.Connection;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author SashNamizni
 */
public class wlanAnalysisFrame extends javax.swing.JFrame {

    /**
     * Creates new form wlanAnalysisFrame
     */
    public wlanAnalysisFrame() {
        initComponents();
        setBounds(150, 150, this.getWidth(), this.getHeight());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private Connection conn = null;
    private ProbeRequest lastProbeRequestInDB;
    private ArrayList<ProbeRequest> importList;
    private File inputFolder = null;
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dbPanel = new javax.swing.JPanel();
        connectButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        insertButton = new javax.swing.JButton();
        entriesLabel = new javax.swing.JLabel();
        databaseLabel = new javax.swing.JLabel();
        analysisPanel = new javax.swing.JPanel();
        timeButton = new javax.swing.JButton();
        macButton = new javax.swing.JButton();
        ssidButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ProbeRequest capture analysis");
        setPreferredSize(new java.awt.Dimension(520, 262));
        setResizable(false);

        dbPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Database", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        dbPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dbPanel.setPreferredSize(new java.awt.Dimension(250, 240));

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        selectButton.setText("Select input folder");
        selectButton.setEnabled(false);
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        insertButton.setText("Insert to database");
        insertButton.setEnabled(false);
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        databaseLabel.setText("Database is not ready!");

        javax.swing.GroupLayout dbPanelLayout = new javax.swing.GroupLayout(dbPanel);
        dbPanel.setLayout(dbPanelLayout);
        dbPanelLayout.setHorizontalGroup(
            dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbPanelLayout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(entriesLabel)
                    .addComponent(databaseLabel))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        dbPanelLayout.setVerticalGroup(
            dbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connectButton)
                .addGap(18, 18, 18)
                .addComponent(selectButton)
                .addGap(18, 18, 18)
                .addComponent(insertButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entriesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(databaseLabel))
        );

        analysisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Analysis", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        timeButton.setText("Time");
        timeButton.setEnabled(false);
        timeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeButtonActionPerformed(evt);
            }
        });

        macButton.setText("MAC");
        macButton.setEnabled(false);
        macButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                macButtonActionPerformed(evt);
            }
        });

        ssidButton.setText("SSID");
        ssidButton.setEnabled(false);
        ssidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ssidButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout analysisPanelLayout = new javax.swing.GroupLayout(analysisPanel);
        analysisPanel.setLayout(analysisPanelLayout);
        analysisPanelLayout.setHorizontalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPanelLayout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(timeButton)
                    .addComponent(macButton)
                    .addComponent(ssidButton))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        analysisPanelLayout.setVerticalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timeButton)
                .addGap(18, 18, 18)
                .addComponent(macButton)
                .addGap(18, 18, 18)
                .addComponent(ssidButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dbPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analysisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dbPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                    .addComponent(analysisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        try {
            if (conn == null)
            {
                conn = Database.prepareConnection();
                if (conn != null)
                    selectButton.setEnabled(true);
                lastProbeRequestInDB = Database.getLastProbeRequest(conn);
                if (lastProbeRequestInDB != null)
                {
                    databaseLabel.setText("Database is ready for analysis!");
                    timeButton.setEnabled(true);
                    macButton.setEnabled(true);
                    ssidButton.setEnabled(true);
                }
            }
            else
                throw new Exception("Connection is already established!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Warning!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        try
        {
            JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fc.showOpenDialog(dbPanel);
            final File input = fc.getSelectedFile();
            //File input = new File("E:/dev/input");

            if (input == null)
                throw new Exception("No folder selected!");
            
            inputFolder = input;
            
            importList = Data.parseSourceRequests(input.toString(), lastProbeRequestInDB);
            if (importList.size() > 0)
            {
                entriesLabel.setText(importList.size() + " entries not in database!");
                insertButton.setEnabled(true);
            }
            else
                entriesLabel.setText("All entries already in database!");
            if (lastProbeRequestInDB != null)
                databaseLabel.setText("Database ready for analysis!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        try
        {        
            if(Database.insertListToDB(conn, importList))
            {
                entriesLabel.setText("All entries inserted into database!");
                databaseLabel.setText("Database ready for analysis!");
                timeButton.setEnabled(true);
                macButton.setEnabled(true);
                ssidButton.setEnabled(true);
            }
            else
                throw new Exception("Inserting list to database failed!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getCause(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_insertButtonActionPerformed

    private void timeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeButtonActionPerformed
        JDialog timeForm = new TimeForm(this, true, conn);
        timeForm.setLocation(this.getX()+50, this.getY()+50);
        timeForm.setVisible(true);
    }//GEN-LAST:event_timeButtonActionPerformed

    private void macButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_macButtonActionPerformed
        JDialog macForm = new MACForm(this, true, conn, inputFolder);
        macForm.setLocation(this.getX()+50, this.getY()+50);
        macForm.setVisible(true);
    }//GEN-LAST:event_macButtonActionPerformed

    private void ssidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ssidButtonActionPerformed
        JDialog macForm = new SSIDForm(this, true, conn);
        macForm.setLocation(this.getX()+50, this.getY()+50);
        macForm.setVisible(true);
    }//GEN-LAST:event_ssidButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(wlanAnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(wlanAnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(wlanAnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(wlanAnalysisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new wlanAnalysisFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel analysisPanel;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel databaseLabel;
    private javax.swing.JPanel dbPanel;
    private javax.swing.JLabel entriesLabel;
    private javax.swing.JButton insertButton;
    private javax.swing.JButton macButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JButton ssidButton;
    private javax.swing.JButton timeButton;
    // End of variables declaration//GEN-END:variables
}
